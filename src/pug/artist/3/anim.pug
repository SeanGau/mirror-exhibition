html 
    head 
        //power by https://codepen.io/lmgonzalves/pen/NyzKdr
        style.
            html, body {
                width: 100%;
                height: 100%;
            }
            body {
                background-color: #ffffff;
                background-image: url("/assets/artist/3/bg.png");
                background-position: center center;
                background-size: cover;
                overflow: hidden;
            }

            .range__wrapper {
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                width: 100%;
                height: 100%;
                -webkit-user-select: none;
                    -moz-user-select: none;
                    -ms-user-select: none;
                        user-select: none;
                cursor: pointer;
                overflow: hidden;
            }

            .range__input {
                display: none;
            }

            .range__slider {
                position: absolute;
                left: 0;
                top: 0;
            }

            .range__slider__path {
                fill: #6EA5D6;
                opacity: .5;
            }
    body(onresize="resize()")
        //  Wrapper for the range input slider 
        .range__wrapper
            //  The real input, it will be hidden, but updated properly with Javascript 
            //  For a production usage, you may want to add a label, and also put it inside a form 
            input.range__input(type='range' min='10' max='90' value='64')
            //  SVG elements 
            svg.range__slider(width='100%' height='100%')
                defs
                    clipPath#range__slider__clip-path
                        path.range__slider__path(d='M 0 1023 l 1024 0 l 0 1023 l -1024 0 Z')
                path.range__slider__path(d='M 0 1023 l 1024 0 l 0 1023 l -1024 0 Z')
    script(src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.1.0/anime.min.js") 
    script.
        // Variables to use later
        var rangeWrapper = document.querySelector('.range__wrapper');
        var rangeInput = document.querySelector('.range__input');
        var rangeSliderPaths = document.querySelectorAll('.range__slider__path');
        var mouseX = 0;
        var mouseY = 0;
        var mouseInitialY = 0;
        var mouseDy = 0;
        var mouseDyLimit = 150;
        var mouseDyFactor = 3;
        var max = 100;
        var rangeMin = parseInt(rangeInput.min);
        var rangeMax = parseInt(rangeInput.max);
        var rangeValue = parseInt(rangeInput.value);
        var rangeHeight = document.documentElement.scrollHeight;
        var rangeWidth = document.documentElement.scrollWidth;
        var currentY = rangeHeight * rangeValue / max;
        var rangeMinY = rangeHeight * rangeMin / max;
        var rangeMaxY = rangeHeight * rangeMax / max;
        var scaleMax = 0.32;
        var scale, newPath, newY, newSliderY, lastMouseDy, rangeWrapperLeft, pageX, pageY;

        // Update slider value, initially using the `input` value
        updateValue();

        function resize() {
            rangeHeight = document.documentElement.scrollHeight;
            rangeWidth = document.documentElement.scrollWidth;
            currentY = rangeHeight * rangeValue / max;
            rangeMinY = rangeHeight * rangeMin / max;
            rangeMaxY = rangeHeight * rangeMax / max;
            console.log("resize");
            updateValue();
        }

        // Function to build the slider `path`, using the given `dy` and `ty` values
        function buildPath(dy, ty) {
            var r = `M 0 ${ty} q ${mouseX} ${dy} ${rangeWidth} 0 l 0 ${rangeHeight} l -${rangeWidth} 0 Z`; 
            return r;
        }

        // Function to update the slider value
        function updateValue() {
            // Clear animations if are still running
            anime.remove([rangeSliderPaths[0], rangeSliderPaths[1]]);

            // Calc the `input` value using the current `y`
            rangeValue = parseInt(currentY * max / rangeHeight);
            // Calc `scale` value for numbers
            scale = (rangeValue - rangeMin) / (rangeMax - rangeMin) * scaleMax;
            // Update `input` value
            rangeInput.value = rangeValue;
            // Some maths calc
            if (Math.abs(mouseDy) < mouseDyLimit) {
                lastMouseDy = mouseDy;
            } else {
                lastMouseDy = mouseDy < 0 ? -mouseDyLimit : mouseDyLimit;
            }

            // Calc the `newSliderY` value to build the slider `path`
            newSliderY = currentY + lastMouseDy / mouseDyFactor;
            if (newSliderY < rangeMinY || newSliderY > rangeMaxY) {
                newSliderY = newSliderY < rangeMinY ? rangeMinY : rangeMaxY;
            }

            // Build `path` string and update `path` elements
            newPath = buildPath(lastMouseDy, rangeHeight - newSliderY);
            rangeSliderPaths[0].setAttribute('d', newPath);
            rangeSliderPaths[1].setAttribute('d', newPath);
        }

        // Function to simulate the elastic behavior
        function elasticRelease() {
            // Morph the paths to the opposite direction, to simulate a strong elasticity
            anime({
                targets: rangeSliderPaths,
                d: buildPath(-lastMouseDy * 1.3, rangeHeight - (currentY - lastMouseDy / mouseDyFactor)),
                duration: 300,
                easing: 'easeInOutSine',
                complete: function () {
                    // Morph the paths to the normal state, using the `elasticOut` easing function (default)
                    anime({
                        targets: rangeSliderPaths,
                        d: buildPath(0, rangeHeight - currentY),
                        duration: 1500
                    });
                }
            });

            // Translate the values to the opposite direction, to simulate a strong elasticity
            
        }

        // Handle `mousedown` and `touchstart` events, saving data about mouse position
        function mouseDown(e) {
            mouseY = mouseInitialY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
            rangeWrapperLeft = rangeWrapper.getBoundingClientRect().left;
        }

        // Handle `mousemove` and `touchmove` events, calculating values to morph the slider `path` and translate values properly
        function mouseMove(e) {
            if (mouseY) {
                pageX = e.targetTouches ? e.targetTouches[0].pageX : e.pageX;
                pageY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
                mouseX = pageX - rangeWrapperLeft;
                mouseDy = (pageY - mouseInitialY) * mouseDyFactor;
                newY = currentY + mouseY - pageY;
                if (newY >= rangeMinY && newY <= rangeMaxY) {
                    currentY = newY;
                    mouseY = pageY;
                } else {
                    currentY = newY < rangeMinY ? rangeMinY : rangeMaxY;
                }
                // After doing maths, update the value
                updateValue();
            }
        }

        // Handle `mouseup`, `mouseleave` and `touchend` events
        function mouseUp() {
            // Trigger elastic animation in case `y` value has changed
            if (mouseDy) {
                elasticRelease();
            }
            // Reset values
            mouseY = mouseDy = 0;
        }

        // Events listeners
        rangeWrapper.addEventListener('mousedown', mouseDown);
        rangeWrapper.addEventListener('touchstart', mouseDown);
        rangeWrapper.addEventListener('mousemove', mouseMove);
        rangeWrapper.addEventListener('touchmove', mouseMove);
        rangeWrapper.addEventListener('mouseup', mouseUp);
        rangeWrapper.addEventListener('mouseleave', mouseUp);
        rangeWrapper.addEventListener('touchend', mouseUp);
